// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract BuyAndSell {
    address public wallet;
    uint256 public buy = 5000; // initial buy value
    uint256 public sell = 5000; // initial sell value

    constructor() {
        wallet = msg.sender;
    }

    function AddInterest(uint256 _value, uint256 currentBuy) public pure returns (uint256) {
        require(_value > 500, "Add interest should be greater than 500");
        require(currentBuy <= 300, "Buy value should not exceed 300");
        return currentBuy + _value;
    }

    function MonthlySell(uint256 _value, uint256 currentSell) public pure returns (uint256) {
        require(_value > 80, "MonthlySale value should be greater than 80");
        require(currentSell >= _value, "Sell value should be greater than or equal to the expense value");
        return currentSell - _value;
    }

    function updateBuy(uint256 newBuy) public {
        require(msg.sender == wallet, "Only the contract owner can update the buy value");
        buy = newBuy;
    }

    function updateSell(uint256 newSell) public {
        require(msg.sender == wallet, "Only the contract owner can update the sell value");
        sell = newSell;
    }
}
